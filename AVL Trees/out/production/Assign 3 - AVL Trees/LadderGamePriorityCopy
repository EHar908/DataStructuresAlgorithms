import java.io.File;
import java.util.ArrayList;
import java.util.Scanner;

public class LadderGamePriority extends LadderGame {
    public LadderGamePriority(){

    }

    public LadderGamePriority(String dictionaryFile){
        super(dictionaryFile);
    }




    public void play(String start, String end) {
        start = start.toLowerCase();
        end = end.toLowerCase();

        if(start.length() != end.length()){
            System.out.println("Error: The Start Word and End Word must be the same length.");
        }

        if(!inDictionary(start)){
            System.out.println("Error: The Start Word is not in the dictionary.");
        }

        else if(!inDictionary(end)){
            System.out.println("Error: The End Word is not in the dictionary.");
        }

        AVLTree<WordInfoPriority> thetree = new AVLTree<WordInfoPriority>(); //Make main queue/AVL tree
        AVLTree<WordInfoPriority> wordsUsed = new AVLTree<WordInfoPriority>(); //Make Avl Tree containing previously visited words
        //ArrayList<WordInfoPriority> wordsUsed = new ArrayList<WordInfoPriority>();
        WordInfoPriority firstWord = new WordInfoPriority(start, 0, difLetters(start, end)); //Create object for 1st word.
        wordsUsed.insert(firstWord); //Put the first word in the wordsUsed, since we've visited it first.
        thetree.insert(firstWord); //Put the first word in thetree, since it's the first rung in our ladder.
        int totalEnqueues = 1; //This first rung equals our first part in the tree.

        boolean found = false;
        while(!thetree.isEmpty() && !found){
            WordInfoPriority dequeuedWord = thetree.deleteMin(); //Pick off the smallest node
            ArrayList<String> oneAwayWords = oneAway(dequeuedWord.getWord(), false); //Collect the neighbors here.

            for (int i = 0; i < oneAwayWords.size(); i++) { //Go through the list of the neighbors
                if(oneAwayWords.get(i).equals(end)){ //If the neighbor is equal to the target word
                    found = true; //Switch to true
                    WordInfoPriority newWord = new WordInfoPriority(oneAwayWords.get(i), dequeuedWord.getMoves() + 1, dequeuedWord.getHistory() + " " + oneAwayWords.get(i)); //Collect it in a WordInfoPriority Object
                    firstWord = newWord; //Make the firstWord/current word the newWord.
                    break;

                }
                else if (oneAwayWords.get(i) != end){ //If the word is not equal to the target word,
                    WordInfoPriority usedWord = new WordInfoPriority(oneAwayWords.get(i), dequeuedWord.getMoves() + 1, difLetters(dequeuedWord.getWord(), end), dequeuedWord.getHistory() + " " + oneAwayWords.get(i));
                    if(!wordsUsed.contains(usedWord)){ //and if the word is not contained within the wordsUsed
                        wordsUsed.insert(usedWord);
                        thetree.insert(usedWord);
                        totalEnqueues++;
                    }
                }

            }
        }

        if(found){
            System.out.println(start + " -> " + end + " : " + firstWord.getMoves() + " Moves [" + firstWord.getHistory() + "] " + "Total Enqueues: "+  totalEnqueues);
        }
        else if (!found){
            System.out.println(start + " -> " + end + " : " + "No ladder was found");
        }



        orgWords = new ArrayList<ArrayList<String>>();
        for (int i = 0; i < orgWordsCopy.size(); i++) {
            orgWords.add(new ArrayList<String>());
            for (int j = 0; j < orgWordsCopy.get(i).size(); j++) {
                orgWords.get(i).add(orgWordsCopy.get(i).get(j));
            }
        }

    }

    public int difLetters(String oneWord, String otherWord){
        int diffLetters = 0;
        for (int i = 0; i < oneWord.length(); i++) {
            if(oneWord.charAt(i) != otherWord.charAt(i)){
                diffLetters++;
            }
        }
        return diffLetters;
    }

    private void readDictionary(String dictionaryFile) {
        File file = new File(dictionaryFile);
        ArrayList<String> allWords = new ArrayList<>();

        //
        // Track the longest word, because that tells us how big to make the array.
        int longestWord = 0;
        try (Scanner input = new Scanner(file)) {
            //
            // Start by reading all the words into memory.
            while (input.hasNextLine()) {
                String word = input.nextLine().toLowerCase();
                allWords.add(word);
                longestWord = Math.max(longestWord, word.length());
            }
            //System.out.println(allWords);

            for (int i = 0; i <= longestWord; i++){
                orgWords.add(new ArrayList<>());
                orgWordsCopy.add(new ArrayList<>());
                for (String word : allWords){
                    if (word.length() == i){
                        orgWords.get(i).add(word);
                        orgWordsCopy.get(i).add(word);
                    }
                }

            }
        }
        catch (java.io.IOException ex) {
            System.out.println("An error occurred trying to read the dictionary: " + ex);
        }
    }


}



